

#include"num.h"
void Bnum::show()//显示数字
{
	int length = num.size();
	if (sub == 1) cout << '+';
	else cout << '-';
	for (int i = length-1; i>=0; i--)
		cout << num[i];
	cout << endl;
}
//-----------------构造函数-----------------------
Bnum::Bnum(string a)
{
	if (a[0] == '+') sub = 1;
	else sub = -1;
	vector<int> vec;
	int i;
	for (i = 1; i < a.length(); i++)
		vec.push_back(a[i] - '0');
	for (i = vec.size() - 1; i >= 0; i--)
		num.push_back(vec[i]);

}


void Bnum::input()//输入
{
	vector<int>vec;
	int i;
	string s;
	cin >> s;
	if (s[0] == '+') sub = 1;
	else sub = -1;
	for (i = 1; i <= s.length() - 1; i++)
		vec.push_back(s[i] - '0');
	num.pop_back();
		for (i = vec.size()-1; i >= 0; i--)
		num.push_back(vec[i]);
}

//正数的加法
Bnum Add(Bnum num1, Bnum num2)
{	
	int length,length2;
	if (num1.num.size() > num2.num.size()) length = num1.num.size() + 1,length2=num2.num.size();
	else length = num2.num.size() + 1,length2=num1.num.size();
	vector<int>c(length, 0);
	int i;
	for (i = 0; i <= length2 - 1; i++)
	{
		c[i] = num1.num[i] + num2.num[i]+c[i];
		if (c[i] > 10) c[i]-=10,c[i+1]+=1;
	}
	
	
	if (num1.num.size() > num2.num.size())
		for (i = length2; i < num1.num.size(); i++)
			c[i] += num1.num[i];
	

	if (num1.num.size() < num2.num.size())
		for (i = length2; i < num2.num.size(); i++)
			c[i] += num2.num[i];
	for (i = 0; i <= length - 2; i++)
		if (c[i] >= 10) c[i] -= 10, c[i + 1] += 1;
	
	if (c[length-1] == 0)  c.pop_back();
	Bnum num3;
	num3.num = c;
	num3.sub = 1;
	return num3;
}

Bnum Sub(Bnum num1, Bnum num2)// 大数减小数
{
	Bnum num3;

	vector<int>vec(num1.num);

	Bnum num4;
	num4.sub = 1;
	num4.num = vec;
	if (num2.num.size() == 1 && num2.num[0] == 0) return num4;
	int length, length1;
	length = num1.num.size();
	vector<int>c(length, 0);
	length1 = num2.num.size();
	for (int i = 0; i <= length1 - 1; i++)
	{
		if (num1.num[i] < num2.num[i]) num1.num[i] += 10, num1.num[i + 1] -= 1;
		c[i] = num1.num[i] - num2.num[i];
	}
	for (int i = length-1; i >= 0; i--)
	{		if (c[i] == 0) c.pop_back();
		else break;
     }
	num3.num = c;
	num3.sub = 1;
	
	 return num3;
}

Bnum EasyMul(Bnum  num1, int n)// 个位数的乘法，n是个位数
{
	Bnum num;
	vector<int> vec;
	vec.push_back(0);
	num.sub = 1;
	if (n == 0) num1.num = vec;
	if (n == 1) num.num = num1.num;
	if (n > 1)
	{
		num.num = num1.num;
		for (int i = 1; i < n; i++)
			num = Add(num1, num);
	}
	if (num.num.empty() ==true) num.num.push_back(0);
	return num;
}

Bnum BMul(Bnum num1, int n)// 扩大10的n次方
{  
	Bnum num;
	for (int i = 0; i < n; i++)
		num1.num.insert(num1.num.begin(), 0);
	num.num = num1.num;
	num.sub = 1;
	return num;
}
//-----------------------整数相乘————————————————————
Bnum Mul(Bnum num1, Bnum num2)
{	
	Bnum num;
	Bnum num3;
	int length = num1.num.size() + num2.num.size();
	int length1 = num1.num.size();
	vector<int> c(1,0);
	num.num=c;
	for (int i=0;i<length1;i++)
	 {   num3=EasyMul(num2,num1.num[i]);  
		num3=BMul(num3,i);
		num = Add(num, num3);
	}
	return num;
}

int  Compare(Bnum num1, Bnum num2)//比较两数的绝对值
{
	if (num1.num.size() > num2.num.size()) return 1;
	if (num2.num.size() > num1.num.size()) return -1;
	if (num1.num.size() == num2.num.size())
	{
		int i;
		for ( i = num1.num.size() - 1;i>=0; i--)
		{		if (num1.num[i] > num2.num[i]) return 1;
		if (num2.num[i] > num1.num[i]) return -1;
		if (i == 0)  return 0;
	     }
	}

}
//---------------------除法--------------------------------

Bnum Devide(Bnum num1, Bnum num2)
{
	int i, j, dis;
	Bnum num3;
	Bnum num4;
	vector<int> vec;
	dis = num1.num.size() - num2.num.size();
	for (i = dis; i >= 0; i--)
	{
		num3 = BMul(num2, i);
		for (j = 0; j <= 10; j++)
			if (Compare(num1, EasyMul(num3, j)) < 0) break;
		j--;
		vec.push_back(j);
		num4 = EasyMul(num3, j);
		num1 = Sub(num1, num4);

	}


	Bnum num;
	for (i = vec.size() - 1; i >= 0; i--)
	{
		if (vec[i] == -1) vec[i] = 0;
		num.num.push_back(vec[i]);
	}
	num.sub = 1;
	for (i = num.num.size() - 1;; i--)
	{
		if (num.num[i] == 0) num.num.pop_back();
		else break;
	}		
	return num;
}


//-----------重载加法----------------------------
Bnum Bnum::operator+(Bnum num1)
{	
	Bnum num2,num3;
	num2.sub = sub;
	num2.num = num;
	if (sub == 1 && num1.sub == 1) num3= Add(num2, num1);
	else if (sub == -1 && num1.sub == -1) num3 = Add(num1, num2), num3.sub = -1;
	else if (sub == 1, num1.sub == -1)
	{
		if (Compare(num2, num1) > 0) num3 = Sub(num2, num1);
		if (Compare(num2, num1) < 0)  num3 = Sub(num1, num2), num3.sub = -1;
	}
	else if (num2.sub == -1 && num1.sub == 1)
	{
		if (Compare(num2, num1) > 0) num3 = Sub(num2, num1),num3.sub=-1;
		if (Compare(num2, num1) < 0)  num3 = Sub(num1, num2);
	}
	return num3;
}


//-----------------------减法重载------------------------
Bnum Bnum::operator-(Bnum num2)
{    
	Bnum num1,num0;
	num1.num = num;
	num1.sub = sub;
	if (num1.sub == 1 && num2.sub == 1)
	{
		if (Compare(num1, num2) > 0) num0 = Sub(num1, num2);
		else num0 = Sub(num2, num1), num0.sub = -1;
	}
	else if (num1.sub == 1 && num2.sub == -1) num0 = Add(num1, num2);
	else if (num1.sub == -1 && num2.sub == 1) num0 = Add(num1, num2), num0.sub = -1;
	else if (num1.sub == -1 && num2.sub == -1)
	{
		if (Compare(num1, num2) > 0) num0 = Sub(num1, num2),num0.sub=-1;
		else num0 = Sub(num2, num1);

	}
	return num0;
}

//---------------------------重载乘法------------------------------
Bnum Bnum::operator*(Bnum num2)
{
	Bnum num1,num0;
	num1.sub = sub;
	num1.num = num;
	num0 = Mul(num1, num2);
	if (num1.sub * num2.sub == 1) num0.sub = 1;
	else num0.sub = 2;
	return num0;
}

//-----------------------重载除法-----------------------------------------
Bnum Bnum::operator/(Bnum num2)
{
	Bnum num1, num0;
	num1.sub = sub;
	num1.num = num;
	num0 = Devide(num1, num2);
	if (num1.sub * num2.sub == 1) num0.sub = 1;
	else num0.sub = 2;
	return num0;
}

//-------------------------重载取模-----------------------------------
Bnum Bnum::operator++()
{
	Bnum num0;
	num0.num = num;
	num0.sub = 1;
	return num0;
}
int main()
{

	Bnum a, b, c;
	a.input();
	char cc;
	cin >> cc;
	b.input();
	if (cc == '+') c = a + b;
	if (cc == '-') c = a - b;
	if (cc == '*') c = a * b;
	if (cc == '/')    c = a / b;

	c.show();
	return 0;
}
